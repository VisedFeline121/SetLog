"""Initial migration

Revision ID: 8b7c432af9a7
Revises: 
Create Date: 2025-09-14 19:06:54.659985

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "8b7c432af9a7"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Enable pgcrypto extension for UUID generation
    op.execute("CREATE EXTENSION IF NOT EXISTS pgcrypto;")

    op.create_table(
        "users",
        sa.Column(
            "id", sa.UUID(), nullable=False, comment="Unique identifier for the user"
        ),
        sa.Column(
            "email",
            sa.String(length=255),
            nullable=False,
            comment="User's email address (unique)",
        ),
        sa.Column(
            "password_hash",
            sa.Text(),
            nullable=False,
            comment="Encrypted password hash",
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            nullable=False,
            comment="Timestamp when the record was created",
        ),
        sa.Column(
            "version",
            sa.Integer(),
            nullable=False,
            comment="Version number for optimistic locking",
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
    )
    op.create_table(
        "audit_events",
        sa.Column(
            "id",
            sa.UUID(),
            nullable=False,
            comment="Unique identifier for the audit event",
        ),
        sa.Column(
            "user_id",
            sa.UUID(),
            nullable=False,
            comment="User who performed the action",
        ),
        sa.Column(
            "entity_type",
            sa.String(length=50),
            nullable=False,
            comment="Type of entity that was modified (e.g., 'exercise', 'session')",
        ),
        sa.Column(
            "entity_id",
            sa.UUID(),
            nullable=False,
            comment="ID of the entity that was modified",
        ),
        sa.Column(
            "payload_json",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=False,
            comment="JSON payload containing the event details",
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            nullable=False,
            comment="Timestamp when the record was created",
        ),
        sa.Column(
            "version",
            sa.Integer(),
            nullable=False,
            comment="Version number for optimistic locking",
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "exercises",
        sa.Column(
            "id",
            sa.UUID(),
            nullable=False,
            comment="Unique identifier for the exercise",
        ),
        sa.Column(
            "slug",
            sa.String(length=255),
            nullable=False,
            comment="URL-friendly unique identifier for the exercise",
        ),
        sa.Column(
            "name",
            sa.String(length=255),
            nullable=False,
            comment="Exercise name (e.g., 'Bench Press')",
        ),
        sa.Column(
            "description",
            sa.Text(),
            nullable=True,
            comment="Optional exercise description",
        ),
        sa.Column(
            "target_muscles",
            postgresql.ARRAY(sa.String()),
            nullable=False,
            comment="Array of target muscle groups (e.g., ['chest', 'triceps'])",
        ),
        sa.Column(
            "created_by",
            sa.UUID(),
            nullable=False,
            comment="User who created this exercise",
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            nullable=False,
            comment="Timestamp when the record was created",
        ),
        sa.Column(
            "version",
            sa.Integer(),
            nullable=False,
            comment="Version number for optimistic locking",
        ),
        sa.ForeignKeyConstraint(["created_by"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("slug"),
    )
    op.create_table(
        "idempotency_keys",
        sa.Column(
            "id",
            sa.UUID(),
            nullable=False,
            comment="Unique identifier for the idempotency key",
        ),
        sa.Column(
            "user_id", sa.UUID(), nullable=False, comment="User this key belongs to"
        ),
        sa.Column(
            "endpoint",
            sa.String(length=255),
            nullable=False,
            comment="API endpoint this key applies to",
        ),
        sa.Column(
            "key",
            sa.String(length=255),
            nullable=False,
            comment="The idempotency key value",
        ),
        sa.Column(
            "request_hash",
            sa.String(length=64),
            nullable=False,
            comment="Hash of the request payload",
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            nullable=False,
            comment="Timestamp when the record was created",
        ),
        sa.Column(
            "version",
            sa.Integer(),
            nullable=False,
            comment="Version number for optimistic locking",
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "user_id", "endpoint", "key", name="uq_idempotency_key_user_endpoint"
        ),
    )
    op.create_table(
        "programs",
        sa.Column(
            "id", sa.UUID(), nullable=False, comment="Unique identifier for the program"
        ),
        sa.Column(
            "owner_id",
            sa.UUID(),
            nullable=False,
            comment="User who created this program",
        ),
        sa.Column(
            "name",
            sa.String(length=255),
            nullable=False,
            comment="Program name (e.g., '5/3/1 Strength')",
        ),
        sa.Column(
            "description",
            sa.Text(),
            nullable=True,
            comment="Optional program description",
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            nullable=False,
            comment="Timestamp when the record was created",
        ),
        sa.Column(
            "version",
            sa.Integer(),
            nullable=False,
            comment="Version number for optimistic locking",
        ),
        sa.ForeignKeyConstraint(["owner_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "report_cache",
        sa.Column(
            "id",
            sa.UUID(),
            nullable=False,
            comment="Unique identifier for the cache entry",
        ),
        sa.Column(
            "user_id",
            sa.UUID(),
            nullable=False,
            comment="User this cache entry belongs to",
        ),
        sa.Column(
            "key",
            sa.String(length=255),
            nullable=False,
            comment="Cache key identifying the report type",
        ),
        sa.Column(
            "payload_json",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=False,
            comment="JSON payload containing the cached report data",
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            nullable=False,
            comment="Timestamp when the record was created",
        ),
        sa.Column(
            "version",
            sa.Integer(),
            nullable=False,
            comment="Version number for optimistic locking",
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_id", "key", name="uq_report_cache_user_key"),
    )
    op.create_table(
        "program_entries",
        sa.Column(
            "id",
            sa.UUID(),
            nullable=False,
            comment="Unique identifier for the program entry",
        ),
        sa.Column(
            "program_id",
            sa.UUID(),
            nullable=False,
            comment="Program this entry belongs to",
        ),
        sa.Column(
            "exercise_id",
            sa.UUID(),
            nullable=False,
            comment="Exercise included in this program entry",
        ),
        sa.Column(
            "day_of_week",
            sa.Integer(),
            nullable=False,
            comment="Day of the week (0=Sunday, 1=Monday, ..., 6=Saturday)",
        ),
        sa.Column(
            "position",
            sa.Integer(),
            nullable=False,
            comment="Position within the day (1-based)",
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            nullable=False,
            comment="Timestamp when the record was created",
        ),
        sa.Column(
            "version",
            sa.Integer(),
            nullable=False,
            comment="Version number for optimistic locking",
        ),
        sa.ForeignKeyConstraint(["exercise_id"], ["exercises.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["program_id"], ["programs.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "program_id",
            "day_of_week",
            "position",
            name="uq_program_entry_day_position",
        ),
    )
    op.create_table(
        "user_programs",
        sa.Column(
            "id",
            sa.UUID(),
            nullable=False,
            comment="Unique identifier for the user program assignment",
        ),
        sa.Column(
            "user_id",
            sa.UUID(),
            nullable=False,
            comment="User assigned to this program",
        ),
        sa.Column(
            "program_id", sa.UUID(), nullable=False, comment="Program being assigned"
        ),
        sa.Column(
            "start_date",
            sa.String(length=10),
            nullable=False,
            comment="Date when the user started this program (YYYY-MM-DD)",
        ),
        sa.Column(
            "active",
            sa.Boolean(),
            nullable=False,
            comment="Whether this assignment is currently active",
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            nullable=False,
            comment="Timestamp when the record was created",
        ),
        sa.Column(
            "version",
            sa.Integer(),
            nullable=False,
            comment="Version number for optimistic locking",
        ),
        sa.ForeignKeyConstraint(["program_id"], ["programs.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "sessions",
        sa.Column(
            "id", sa.UUID(), nullable=False, comment="Unique identifier for the session"
        ),
        sa.Column(
            "user_id",
            sa.UUID(),
            nullable=False,
            comment="User who performed this session",
        ),
        sa.Column(
            "user_program_id",
            sa.UUID(),
            nullable=True,
            comment="Program assignment this session belongs to (if any)",
        ),
        sa.Column(
            "prog_week_index",
            sa.Integer(),
            nullable=True,
            comment="Week index within the program (if part of program)",
        ),
        sa.Column(
            "prog_day_of_week",
            sa.Integer(),
            nullable=True,
            comment="Day of week within the program (if part of program)",
        ),
        sa.Column(
            "started_at",
            sa.String(length=19),
            nullable=False,
            comment="Timestamp when session started (YYYY-MM-DD HH:MM:SS)",
        ),
        sa.Column(
            "ended_at",
            sa.String(length=19),
            nullable=True,
            comment="Timestamp when session ended (YYYY-MM-DD HH:MM:SS)",
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            nullable=False,
            comment="Timestamp when the record was created",
        ),
        sa.Column(
            "version",
            sa.Integer(),
            nullable=False,
            comment="Version number for optimistic locking",
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["user_program_id"], ["user_programs.id"], ondelete="SET NULL"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "sets",
        sa.Column(
            "id", sa.UUID(), nullable=False, comment="Unique identifier for the set"
        ),
        sa.Column(
            "session_id",
            sa.UUID(),
            nullable=False,
            comment="Session this set belongs to",
        ),
        sa.Column(
            "exercise_id",
            sa.UUID(),
            nullable=False,
            comment="Exercise performed in this set",
        ),
        sa.Column(
            "set_index",
            sa.Integer(),
            nullable=False,
            comment="Order within the session/exercise (1-based)",
        ),
        sa.Column(
            "reps",
            sa.Integer(),
            nullable=False,
            comment="Number of repetitions performed",
        ),
        sa.Column(
            "weight_kg",
            sa.String(length=10),
            nullable=False,
            comment="Weight used in kilograms",
        ),
        sa.Column(
            "rpe",
            sa.String(length=4),
            nullable=True,
            comment="Rate of Perceived Exertion (1-10 scale, optional)",
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            nullable=False,
            comment="Timestamp when the record was created",
        ),
        sa.Column(
            "version",
            sa.Integer(),
            nullable=False,
            comment="Version number for optimistic locking",
        ),
        sa.CheckConstraint("reps > 0", name="ck_set_reps_positive"),
        sa.CheckConstraint(
            "rpe IS NULL OR (rpe::numeric BETWEEN 1 AND 10)", name="ck_set_rpe_range"
        ),
        sa.CheckConstraint(
            "weight_kg::numeric >= 0", name="ck_set_weight_non_negative"
        ),
        sa.ForeignKeyConstraint(["exercise_id"], ["exercises.id"], ondelete="RESTRICT"),
        sa.ForeignKeyConstraint(["session_id"], ["sessions.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "session_id",
            "exercise_id",
            "set_index",
            name="uq_set_session_exercise_index",
        ),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("sets")
    op.drop_table("sessions")
    op.drop_table("user_programs")
    op.drop_table("program_entries")
    op.drop_table("report_cache")
    op.drop_table("programs")
    op.drop_table("idempotency_keys")
    op.drop_table("exercises")
    op.drop_table("audit_events")
    op.drop_table("users")
    # ### end Alembic commands ###
